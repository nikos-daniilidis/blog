---
layout: post
title:  "Clustering of text: It is not flat!"
date:   2014-06-15 10:00:00
categories: jekyll update
---
This is going to be a technical post. I am looking into the behaviour of clustering analysis for text entries. The reason is that I tried putting in clusters the title/authors-list data for the Physical Review archive and was unpleasantly surprised. I went in with high expectations: The titles in science publications have lots of condensed meaning to them, and the authors list provides one additional hint to nail down which category an article belongs to. To my surprise, I found that a simple clustering algorithm (k-means) was putting 95% of my data in the same cluster.

Naturally, to me this result was the equivalent of what the picture below must have been to the members of the [flat earth society](http://theflatearthsociety.org/cms/): I thought "Nonsense! There must be a work around this!". Below are the efforts. Thankfully in blogging, unlike in academia, you are allowed to publish negative results ;-)

![first ever picture of earth from space](/assets/2014-06-15-text-k-means/first-ever-earth-from-space.jpg)

_First ever photograph of earth from space (credits: NASA)_

So, here is a statement of the problem: we have a bunch of text entries (a "corpus") which belong to a number of different categories, say 5000 text entries from 10 categories. How can we tell a computer to sort them out? One way is declare that entries containing the same terms belong to the same cluster. In order to allow our machine to decide that, we create a collection of all the terms, numbered from 1 to N (yes, I still count form 1!). Now for each text entry, we count how  many times each term appears, and in this way convert the entry to a vector in the N-dimensional space of all terms appearing in the text corpus. Once we have done that, we can decide how much two text entries are related, based on their 'distance' in this N-dimensional space. Thus, we can use our favourite distance metric and clustering algorithm to split the text entries into categories. Simple, right?

There are some caveats about getting rid of very common and very uncommon words and about keeping the stems of words (e.g. "spher" for "sphere" and for "spherical") which I will not go into here. All these details can be taken care of using standard tools and they result in increased signal to noise. Sadly, after all this is said and done, two pretty hairy issues remain:

The first has to do with the dimensionality of the vector space in which we need to cluster. The space is huge (for a text corpus of 5000 paragraph-long samples we can easily end up with 5000 dimensions i.e. 5000 distinct terms). Now each vector among our samples has much lower dimension, probably 10-40 terms, let's say it typically extends to 20 dimensions. Clearly, we are severely undersampling the vector space. For example the probability that two 20-dimensional vectors randomly picked from a 5000 dimensional space will have any dimensions in common is around 8% (thanks to Shirley Yap for solving this problem in 3 minutes and sparing me 2 hours of adding factorials!).

The other issue has to do with the shape of the clusters corresponding to each category: They will most likely not be convex. In fact I am absolutely certain I will never be able to understand all the ways in which 5000-dimensional clusters can be oddly shaped.

The simplest clustering algorithm there is (k-means) can offer some insights. k-means is extremely simple. It tries to categorize sample vectors into k clusters, with k fixed. It starts by randomly selecting k cluster centers (or "centroids"), and places each data point in one cluster, based on which centroid is the closest to it. Then it recalculates the cluster centers as the centers of mass of the newly formed clusters, and keeps repeating the process of assigning samples to clusters and repositioning the centers until the center positions converge.

Instead of working with the Physical Review data, where things failed badly, let's do the clustering analysis on a dataset where the text entries are slightly longer. We chose the "20 newsgroups-18828" data set ([from MLcomp.org](http://mlcomp.org/datasets)), and carry out the clustering analysis on the entries found in 7 categories of this data set. To categorize the data into clusters, we run k-means with 7 clusters, and assign to each of the clusters the label of the majority of its members. The result is that an unimpressive 45% of the data end up being categorized with the wrong label. This is much better that the 86% we would expect with random group assignments, but we were hoping for more.

The following figure can give us an idea why: In this plot we see the probability that a randomly chosen text entry will fall into a given cluster. Darker blue means higher probability. Some of the clusters are well separated from all but one groups, for example "sci.space" corresponds pretty nicely to cluster #1. But we also see that some clusters, most notably #2 get a sizeable fraction of entries from all categories. We also see that most of the confusion is around computer hardware and graphics issues.

![confusion matrix for text clustering](/assets/2014-06-15-text-k-means/clustering-7x7.png)

_Probability of assigning members of a given group to one of the clusters._

Is there a way around this? Yes, partially. We can ask k-means to use more clusters, and hope that it will be able to capture more of the fine details in the topics we are trying to differentiate. Let's see how this goes. We push the number of clusters up to 1000, and assign each cluster to one of the seven groups according to the category of the majority of its members. We then look a the fraction of text entries which do not get properly classified in this process. The result is in the following figure (error-bars represent the standard deviation in classification error in 10 runs of the algorithm).

![error vs number of clusters](/assets/2014-06-15-text-k-means/error-vs-clusters-l2-tf-idf-no-label.png)

_Classification error vs number of clusters_

What an interesting figure! We see a moderate improvement in the accuracy of the classification, but at the expense of an immense increase in the number of clusters. How far can we push this approach? The extreme limit is to make the number of clusters equal to the number of text entries, around 5000 for our current example. In this limit, where on average we will have one cluster per text entry, does it make sense to talk about clustering any more? In a way, it does. The increase in number of clusters is reminiscent of what is called hierarchical clustering, where small clusters are joined into larger ones to form a hierarchy. This is essentially what we do here, where we start with many clusters and join them to form a few groups. Word on the street (i.e. on [http://stats.stackexchange.com/](http://stats.stackexchange.com/)) has it that hierarchical clustering is preferable  to k-means for text data, which agrees with the pattern we see here.

So increasing the number of clusters makes sense from an intuitive 'hierarchy of content' point of view. There is also a geometric way to understand why more clusters help with k-means. By its construction, k-means works with convex clusters, those blobs in the feature space which have no protrusions, no indentations and no cavities. However, the clusters corresponding to the groups in our data do not necessarily have this property. Thus, by allowing for a large number of clusters which we then join together, we can conform to non-convex shapes. Interestingly, although we are using up to 1000 clusters we do not seem to have the problem of "overfitting", i.e. making a prediction which follows every random detail in our data set, but lacks predictive power: To ensure this, we estimated the error in the above plot using a different set of data than the set which we used to label the clusters.

This geometric view might have something to do with an interesting aspect of the curve above. You might have noticed that the improvement in error with number of clusters is initially slow, but seems to change abruptly at around 500 clusters, where there is a kink in the curve. Below the kink, the  error drops with number of clusters as $$ err \sim n_{cl}^{-0.05}$$, while above it it drops as $$ err \sim n_{cl}^{-0.35}$$. On seeing this, the natural instinct of someone with my training is to shout "Phase Transition!". But, perhaps, a more valid question to ask is whether this change in behavior has to do with the convexity properties of the shapes we are trying  to fit in 5000-dimensional space. I can't promise I'll do this, but well, hey, if you're interested the code is available for you to build on and answer the question! To sum it all up, geometry matters. We can go back to our proverbial 'Flat earth society' member, and proclaim: It is flat! (depending on your coordinate system).

This exercise was based on the python [scikit-learn](http://scikit-learn.org/stable/) package. As usual, you can find the code for this post on github as [IPython notebook](https://github.com/nikos-daniilidis/haystack/blob/master/clustering-performance-short.ipynb) and converted to [html](http://nikos-daniilidis.github.io/haystack/clustering-performance-short.html). [Same post on wordpress](http://oligotropos.wordpress.com/2014/06/15/clustering-of-text-it-is-not-flat/).

